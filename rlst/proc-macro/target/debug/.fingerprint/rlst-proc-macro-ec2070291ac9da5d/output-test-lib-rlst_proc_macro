{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/tracing.rs","byte_start":238,"byte_end":244,"line_start":11,"line_end":11,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    id: String,","highlight_start":9,"highlight_end":15}],"label":"expected fn pointer, found fn item","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/tracing.rs","byte_start":238,"byte_end":244,"line_start":11,"line_end":11,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    id: String,","highlight_start":9,"highlight_end":15}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `for<'a> fn(&'a syn::Meta) -> Result<_, _>`\n      found fn item `for<'a> fn(&'a syn::attr::Meta) -> Result<_, _> {<_ as FromMeta>::from_meta}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the return type of this call is `for<'a> fn(&'a syn::attr::Meta) -> Result<_, darling::Error> {<_ as FromMeta>::from_meta}` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"src/tracing.rs","byte_start":238,"byte_end":244,"line_start":11,"line_end":11,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    id: String,","highlight_start":9,"highlight_end":15}],"label":"this argument influences the return type of `identity`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/betcke/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/convert/mod.rs","byte_start":3718,"byte_end":3726,"line_start":104,"line_end":104,"column_start":14,"column_end":22,"is_primary":true,"text":[{"text":"pub const fn identity<T>(x: T) -> T {","highlight_start":14,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tracing.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    id: String,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected fn pointer, found fn item\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9marguments to this function are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(&'a syn::\u001b[0m\u001b[0m\u001b[1m\u001b[35mMeta\u001b[0m\u001b[0m) -> Result<\u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(&'a syn::\u001b[0m\u001b[0m\u001b[1m\u001b[35mattr::Meta\u001b[0m\u001b[0m) -> Result<\u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m, _>\u001b[0m\u001b[0m\u001b[1m\u001b[35m {<_ as FromMeta>::from_meta}\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the return type of this call is `for<'a> fn(&'a syn::attr::Meta) -> Result<_, darling::Error> {<_ as FromMeta>::from_meta}` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tracing.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    id: String,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis argument influences the return type of `identity`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/betcke/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/convert/mod.rs:104:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const fn identity<T>(x: T) -> T {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/tracing.rs","byte_start":238,"byte_end":244,"line_start":11,"line_end":11,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    id: String,","highlight_start":9,"highlight_end":15}],"label":"expected `syn::Meta`, found `syn::attr::Meta`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/tracing.rs","byte_start":238,"byte_end":244,"line_start":11,"line_end":11,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    id: String,","highlight_start":9,"highlight_end":15}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"two different versions of crate `syn` are being used; two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[{"file_name":"/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs","byte_start":4365,"byte_end":4369,"line_start":170,"line_end":170,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"        $mac!([$(#[$m])* $pub] $($t)*);","highlight_start":26,"highlight_end":30}],"label":"this is the expected type `syn::Meta`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs","byte_start":1327,"byte_end":1362,"line_start":55,"line_end":55,"column_start":9,"column_end":44,"is_primary":false,"text":[{"text":"        strip_attrs_pub!(ast_enum!($($t)*));","highlight_start":9,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs","byte_start":1543,"byte_end":1594,"line_start":65,"line_end":65,"column_start":9,"column_end":60,"is_primary":false,"text":[{"text":"        ast_enum!($(#[$enum_attr])* $pub $enum $name $body);","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs","byte_start":11520,"byte_end":12515,"line_start":336,"line_end":370,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"ast_enum_of_structs! {","highlight_start":1,"highlight_end":1},{"text":"    /// Content of a compile-time structured attribute.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// *This type is available only if Syn is built with the `\"derive\"` or `\"full\"`","highlight_start":1,"highlight_end":1},{"text":"    /// feature.*","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ## Path","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// A meta path is like the `test` in `#[test]`.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ## List","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// A meta list is like the `derive(Copy)` in `#[derive(Copy)]`.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ## NameValue","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// A name-value meta is like the `path = \"...\"` in `#[path =","highlight_start":1,"highlight_end":1},{"text":"    /// \"sys/windows.rs\"]`.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// # Syntax tree enum","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// This type is a [syntax tree enum].","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// [syntax tree enum]: Expr#syntax-tree-enums","highlight_start":1,"highlight_end":1},{"text":"    #[cfg_attr(doc_cfg, doc(cfg(any(feature = \"full\", feature = \"derive\"))))]","highlight_start":1,"highlight_end":1},{"text":"    pub enum Meta {","highlight_start":1,"highlight_end":1},{"text":"        Path(Path),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A structured list within an attribute, like `derive(Copy, Clone)`.","highlight_start":1,"highlight_end":1},{"text":"        List(MetaList),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A name-value pair within an attribute, like `feature = \"nightly\"`.","highlight_start":1,"highlight_end":1},{"text":"        NameValue(MetaNameValue),","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ast_enum_of_structs!","def_site_span":{"file_name":"/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs","byte_start":1374,"byte_end":1406,"line_start":59,"line_end":59,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! ast_enum_of_structs {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"ast_enum!","def_site_span":{"file_name":"/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs","byte_start":929,"byte_end":950,"line_start":38,"line_end":38,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! ast_enum {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"strip_attrs_pub!","def_site_span":{"file_name":"/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs","byte_start":4206,"byte_end":4234,"line_start":166,"line_end":166,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! strip_attrs_pub {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.101/src/macros.rs","byte_start":1350,"byte_end":1372,"line_start":49,"line_end":49,"column_start":27,"column_end":49,"is_primary":true,"text":[{"text":"        $(#[$enum_attr])* $pub $enum $name $body","highlight_start":27,"highlight_end":49}],"label":"this is the found type `syn::attr::Meta`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.101/src/attr.rs","byte_start":15668,"byte_end":16553,"line_start":451,"line_end":482,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"ast_enum! {","highlight_start":1,"highlight_end":1},{"text":"    /// Content of a compile-time structured attribute.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ## Path","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// A meta path is like the `test` in `#[test]`.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ## List","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// A meta list is like the `derive(Copy)` in `#[derive(Copy)]`.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ## NameValue","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// A name-value meta is like the `path = \"...\"` in `#[path =","highlight_start":1,"highlight_end":1},{"text":"    /// \"sys/windows.rs\"]`.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// # Syntax tree enum","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// This type is a [syntax tree enum].","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// [syntax tree enum]: crate::expr::Expr#syntax-tree-enums","highlight_start":1,"highlight_end":1},{"text":"    #[cfg_attr(docsrs, doc(cfg(any(feature = \"full\", feature = \"derive\"))))]","highlight_start":1,"highlight_end":1},{"text":"    pub enum Meta {","highlight_start":1,"highlight_end":1},{"text":"        Path(Path),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A structured list within an attribute, like `derive(Copy, Clone)`.","highlight_start":1,"highlight_end":1},{"text":"        List(MetaList),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A name-value pair within an attribute, like `feature = \"nightly\"`.","highlight_start":1,"highlight_end":1},{"text":"        NameValue(MetaNameValue),","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ast_enum!","def_site_span":{"file_name":"/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.101/src/macros.rs","byte_start":1113,"byte_end":1134,"line_start":41,"line_end":41,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! ast_enum {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/tracing.rs","byte_start":136,"byte_end":139,"line_start":6,"line_end":6,"column_start":5,"column_end":8,"is_primary":false,"text":[{"text":"use syn::parse_macro_input;","highlight_start":5,"highlight_end":8}],"label":"one version of crate `syn` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/tracing.rs","byte_start":40,"byte_end":47,"line_start":3,"line_end":3,"column_start":5,"column_end":12,"is_primary":false,"text":[{"text":"use darling::{ast::NestedMeta, Error, FromMeta};","highlight_start":5,"highlight_end":12}],"label":"one version of crate `syn` used here, as a dependency of crate `darling_core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tracing.rs:11:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    id: String,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `syn::Meta`, found `syn::attr::Meta`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9marguments to this function are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: two different versions of crate `syn` are being used; two types coming from two different versions of the same crate are different types even if they look the same\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:336:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mast_enum_of_structs! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Content of a compile-time structured attribute.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m338\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m339\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// *This type is available only if Syn is built with the `\"derive\"` or `\"full\"`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the expected type `syn::Meta`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/tracing.rs:3:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse darling::{ast::NestedMeta, Error, FromMeta};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `syn` used here, as a dependency of crate `darling_core`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse syn::parse_macro_input;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `syn` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/betcke/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.101/src/attr.rs:451:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mast_enum! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m452\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Content of a compile-time structured attribute.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ## Path\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m482\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the found type `syn::attr::Meta`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `cargo tree` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `strip_attrs_pub` which comes from the expansion of the macro `ast_enum` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
